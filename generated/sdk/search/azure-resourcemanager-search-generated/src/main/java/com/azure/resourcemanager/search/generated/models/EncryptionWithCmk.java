// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.search.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Describes properties associated with encryption of resources using customer managed Keys. */
@Fluent
public final class EncryptionWithCmk {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(EncryptionWithCmk.class);

    /*
     * Enforcement state of encryption with customer managed keys. Can be
     * enabled, disabled, or unspecified.
     */
    @JsonProperty(value = "enforcement")
    private EncryptionEnforcementStatus enforcement;

    /*
     * The list of Non Cmk encrypted resource.
     */
    @JsonProperty(value = "nonCmkEncryptedResources", access = JsonProperty.Access.WRITE_ONLY)
    private List<NonCmkEncryptedResource> nonCmkEncryptedResources;

    /**
     * Get the enforcement property: Enforcement state of encryption with customer managed keys. Can be enabled,
     * disabled, or unspecified.
     *
     * @return the enforcement value.
     */
    public EncryptionEnforcementStatus enforcement() {
        return this.enforcement;
    }

    /**
     * Set the enforcement property: Enforcement state of encryption with customer managed keys. Can be enabled,
     * disabled, or unspecified.
     *
     * @param enforcement the enforcement value to set.
     * @return the EncryptionWithCmk object itself.
     */
    public EncryptionWithCmk withEnforcement(EncryptionEnforcementStatus enforcement) {
        this.enforcement = enforcement;
        return this;
    }

    /**
     * Get the nonCmkEncryptedResources property: The list of Non Cmk encrypted resource.
     *
     * @return the nonCmkEncryptedResources value.
     */
    public List<NonCmkEncryptedResource> nonCmkEncryptedResources() {
        return this.nonCmkEncryptedResources;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (nonCmkEncryptedResources() != null) {
            nonCmkEncryptedResources().forEach(e -> e.validate());
        }
    }
}
