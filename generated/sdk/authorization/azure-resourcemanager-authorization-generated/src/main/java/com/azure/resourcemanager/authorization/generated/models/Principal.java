// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Deny assignment principal. */
@Immutable
public final class Principal {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(Principal.class);

    /*
     * Object ID of the Azure AD principal (user, group, or service principal)
     * to which the deny assignment applies. An empty guid
     * '00000000-0000-0000-0000-000000000000' as principal id and principal
     * type as 'Everyone' represents all users, groups and service principals.
     */
    @JsonProperty(value = "id", access = JsonProperty.Access.WRITE_ONLY)
    private String id;

    /*
     * Type of object represented by principal id (user, group, or service
     * principal). An empty guid '00000000-0000-0000-0000-000000000000' as
     * principal id and principal type as 'Everyone' represents all users,
     * groups and service principals.
     */
    @JsonProperty(value = "type", access = JsonProperty.Access.WRITE_ONLY)
    private String type;

    /**
     * Get the id property: Object ID of the Azure AD principal (user, group, or service principal) to which the deny
     * assignment applies. An empty guid '00000000-0000-0000-0000-000000000000' as principal id and principal type as
     * 'Everyone' represents all users, groups and service principals.
     *
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the type property: Type of object represented by principal id (user, group, or service principal). An empty
     * guid '00000000-0000-0000-0000-000000000000' as principal id and principal type as 'Everyone' represents all
     * users, groups and service principals.
     *
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
