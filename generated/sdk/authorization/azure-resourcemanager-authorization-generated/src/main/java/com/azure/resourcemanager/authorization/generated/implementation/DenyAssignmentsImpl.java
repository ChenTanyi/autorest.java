// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.authorization.generated.AuthorizationManager;
import com.azure.resourcemanager.authorization.generated.fluent.DenyAssignmentsClient;
import com.azure.resourcemanager.authorization.generated.fluent.models.DenyAssignmentInner;
import com.azure.resourcemanager.authorization.generated.models.DenyAssignment;
import com.azure.resourcemanager.authorization.generated.models.DenyAssignments;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class DenyAssignmentsImpl implements DenyAssignments {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DenyAssignmentsImpl.class);

    private final DenyAssignmentsClient innerClient;

    private final AuthorizationManager serviceManager;

    public DenyAssignmentsImpl(DenyAssignmentsClient innerClient, AuthorizationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<DenyAssignment> listForResource(
        String resourceGroupName,
        String resourceProviderNamespace,
        String parentResourcePath,
        String resourceType,
        String resourceName) {
        PagedIterable<DenyAssignmentInner> inner =
            this
                .serviceClient()
                .listForResource(
                    resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName);
        return inner.mapPage(inner1 -> new DenyAssignmentImpl(inner1, this.manager()));
    }

    public PagedIterable<DenyAssignment> listForResource(
        String resourceGroupName,
        String resourceProviderNamespace,
        String parentResourcePath,
        String resourceType,
        String resourceName,
        String filter,
        Context context) {
        PagedIterable<DenyAssignmentInner> inner =
            this
                .serviceClient()
                .listForResource(
                    resourceGroupName,
                    resourceProviderNamespace,
                    parentResourcePath,
                    resourceType,
                    resourceName,
                    filter,
                    context);
        return inner.mapPage(inner1 -> new DenyAssignmentImpl(inner1, this.manager()));
    }

    public PagedIterable<DenyAssignment> listByResourceGroup(String resourceGroupName) {
        PagedIterable<DenyAssignmentInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return inner.mapPage(inner1 -> new DenyAssignmentImpl(inner1, this.manager()));
    }

    public PagedIterable<DenyAssignment> listByResourceGroup(String resourceGroupName, String filter, Context context) {
        PagedIterable<DenyAssignmentInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, filter, context);
        return inner.mapPage(inner1 -> new DenyAssignmentImpl(inner1, this.manager()));
    }

    public PagedIterable<DenyAssignment> list() {
        PagedIterable<DenyAssignmentInner> inner = this.serviceClient().list();
        return inner.mapPage(inner1 -> new DenyAssignmentImpl(inner1, this.manager()));
    }

    public PagedIterable<DenyAssignment> list(String filter, Context context) {
        PagedIterable<DenyAssignmentInner> inner = this.serviceClient().list(filter, context);
        return inner.mapPage(inner1 -> new DenyAssignmentImpl(inner1, this.manager()));
    }

    public DenyAssignment get(String scope, String denyAssignmentId) {
        DenyAssignmentInner inner = this.serviceClient().get(scope, denyAssignmentId);
        if (inner != null) {
            return new DenyAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DenyAssignment> getWithResponse(String scope, String denyAssignmentId, Context context) {
        Response<DenyAssignmentInner> inner = this.serviceClient().getWithResponse(scope, denyAssignmentId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DenyAssignmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DenyAssignment getById(String denyAssignmentId) {
        DenyAssignmentInner inner = this.serviceClient().getById(denyAssignmentId);
        if (inner != null) {
            return new DenyAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DenyAssignment> getByIdWithResponse(String denyAssignmentId, Context context) {
        Response<DenyAssignmentInner> inner = this.serviceClient().getByIdWithResponse(denyAssignmentId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DenyAssignmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<DenyAssignment> listForScope(String scope) {
        PagedIterable<DenyAssignmentInner> inner = this.serviceClient().listForScope(scope);
        return inner.mapPage(inner1 -> new DenyAssignmentImpl(inner1, this.manager()));
    }

    public PagedIterable<DenyAssignment> listForScope(String scope, String filter, Context context) {
        PagedIterable<DenyAssignmentInner> inner = this.serviceClient().listForScope(scope, filter, context);
        return inner.mapPage(inner1 -> new DenyAssignmentImpl(inner1, this.manager()));
    }

    private DenyAssignmentsClient serviceClient() {
        return this.innerClient;
    }

    private AuthorizationManager manager() {
        return this.serviceManager;
    }
}
