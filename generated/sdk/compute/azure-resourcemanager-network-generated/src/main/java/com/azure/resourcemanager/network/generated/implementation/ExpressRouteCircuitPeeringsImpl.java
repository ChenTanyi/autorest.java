// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.resourcemanager.network.generated.NetworkManager;
import com.azure.resourcemanager.network.generated.fluent.ExpressRouteCircuitPeeringsClient;
import com.azure.resourcemanager.network.generated.fluent.models.ExpressRouteCircuitPeeringInner;
import com.azure.resourcemanager.network.generated.models.ExpressRouteCircuitPeering;
import com.azure.resourcemanager.network.generated.models.ExpressRouteCircuitPeerings;

public final class ExpressRouteCircuitPeeringsImpl implements ExpressRouteCircuitPeerings {
    private final ExpressRouteCircuitPeeringsClient innerClient;

    private final NetworkManager serviceManager;

    public ExpressRouteCircuitPeeringsImpl(
        ExpressRouteCircuitPeeringsClient innerClient, NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void delete(String resourceGroupName, String circuitName, String peeringName) {
        this.serviceClient().delete(resourceGroupName, circuitName, peeringName);
    }

    public void delete(String resourceGroupName, String circuitName, String peeringName, Context context) {
        this.serviceClient().delete(resourceGroupName, circuitName, peeringName, context);
    }

    public ExpressRouteCircuitPeering get(String resourceGroupName, String circuitName, String peeringName) {
        ExpressRouteCircuitPeeringInner inner = this.serviceClient().get(resourceGroupName, circuitName, peeringName);
        if (inner != null) {
            return new ExpressRouteCircuitPeeringImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ExpressRouteCircuitPeering> getWithResponse(
        String resourceGroupName, String circuitName, String peeringName, Context context) {
        Response<ExpressRouteCircuitPeeringInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, circuitName, peeringName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ExpressRouteCircuitPeeringImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<ExpressRouteCircuitPeering> list(String resourceGroupName, String circuitName) {
        PagedIterable<ExpressRouteCircuitPeeringInner> inner =
            this.serviceClient().list(resourceGroupName, circuitName);
        return inner.mapPage(inner1 -> new ExpressRouteCircuitPeeringImpl(inner1, this.manager()));
    }

    public PagedIterable<ExpressRouteCircuitPeering> list(
        String resourceGroupName, String circuitName, Context context) {
        PagedIterable<ExpressRouteCircuitPeeringInner> inner =
            this.serviceClient().list(resourceGroupName, circuitName, context);
        return inner.mapPage(inner1 -> new ExpressRouteCircuitPeeringImpl(inner1, this.manager()));
    }

    private ExpressRouteCircuitPeeringsClient serviceClient() {
        return this.innerClient;
    }

    private NetworkManager manager() {
        return this.serviceManager;
    }

    public ExpressRouteCircuitPeeringImpl define(String name) {
        return new ExpressRouteCircuitPeeringImpl(name, this.manager());
    }
}
