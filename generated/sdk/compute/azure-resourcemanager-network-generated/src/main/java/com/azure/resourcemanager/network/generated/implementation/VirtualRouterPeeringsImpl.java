// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.resourcemanager.network.generated.NetworkManager;
import com.azure.resourcemanager.network.generated.fluent.VirtualRouterPeeringsClient;
import com.azure.resourcemanager.network.generated.fluent.models.VirtualRouterPeeringInner;
import com.azure.resourcemanager.network.generated.models.VirtualRouterPeering;
import com.azure.resourcemanager.network.generated.models.VirtualRouterPeerings;

public final class VirtualRouterPeeringsImpl implements VirtualRouterPeerings {
    private final VirtualRouterPeeringsClient innerClient;

    private final NetworkManager serviceManager;

    public VirtualRouterPeeringsImpl(VirtualRouterPeeringsClient innerClient, NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void delete(String resourceGroupName, String virtualRouterName, String peeringName) {
        this.serviceClient().delete(resourceGroupName, virtualRouterName, peeringName);
    }

    public void delete(String resourceGroupName, String virtualRouterName, String peeringName, Context context) {
        this.serviceClient().delete(resourceGroupName, virtualRouterName, peeringName, context);
    }

    public VirtualRouterPeering get(String resourceGroupName, String virtualRouterName, String peeringName) {
        VirtualRouterPeeringInner inner = this.serviceClient().get(resourceGroupName, virtualRouterName, peeringName);
        if (inner != null) {
            return new VirtualRouterPeeringImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<VirtualRouterPeering> getWithResponse(
        String resourceGroupName, String virtualRouterName, String peeringName, Context context) {
        Response<VirtualRouterPeeringInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, virtualRouterName, peeringName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VirtualRouterPeeringImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<VirtualRouterPeering> list(String resourceGroupName, String virtualRouterName) {
        PagedIterable<VirtualRouterPeeringInner> inner =
            this.serviceClient().list(resourceGroupName, virtualRouterName);
        return inner.mapPage(inner1 -> new VirtualRouterPeeringImpl(inner1, this.manager()));
    }

    public PagedIterable<VirtualRouterPeering> list(
        String resourceGroupName, String virtualRouterName, Context context) {
        PagedIterable<VirtualRouterPeeringInner> inner =
            this.serviceClient().list(resourceGroupName, virtualRouterName, context);
        return inner.mapPage(inner1 -> new VirtualRouterPeeringImpl(inner1, this.manager()));
    }

    private VirtualRouterPeeringsClient serviceClient() {
        return this.innerClient;
    }

    private NetworkManager manager() {
        return this.serviceManager;
    }

    public VirtualRouterPeeringImpl define(String name) {
        return new VirtualRouterPeeringImpl(name, this.manager());
    }
}
