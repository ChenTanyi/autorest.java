// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.resourcemanager.network.generated.NetworkManager;
import com.azure.resourcemanager.network.generated.fluent.DscpConfigurationsClient;
import com.azure.resourcemanager.network.generated.fluent.models.DscpConfigurationInner;
import com.azure.resourcemanager.network.generated.models.DscpConfiguration;
import com.azure.resourcemanager.network.generated.models.DscpConfigurations;

public final class DscpConfigurationsImpl implements DscpConfigurations {
    private final DscpConfigurationsClient innerClient;

    private final NetworkManager serviceManager;

    public DscpConfigurationsImpl(DscpConfigurationsClient innerClient, NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void delete(String resourceGroupName, String dscpConfigurationName) {
        this.serviceClient().delete(resourceGroupName, dscpConfigurationName);
    }

    public void delete(String resourceGroupName, String dscpConfigurationName, Context context) {
        this.serviceClient().delete(resourceGroupName, dscpConfigurationName, context);
    }

    public DscpConfiguration getByResourceGroup(String resourceGroupName, String dscpConfigurationName) {
        DscpConfigurationInner inner =
            this.serviceClient().getByResourceGroup(resourceGroupName, dscpConfigurationName);
        if (inner != null) {
            return new DscpConfigurationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DscpConfiguration> getByResourceGroupWithResponse(
        String resourceGroupName, String dscpConfigurationName, Context context) {
        Response<DscpConfigurationInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, dscpConfigurationName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DscpConfigurationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<DscpConfiguration> listByResourceGroup(String resourceGroupName) {
        PagedIterable<DscpConfigurationInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return inner.mapPage(inner1 -> new DscpConfigurationImpl(inner1, this.manager()));
    }

    public PagedIterable<DscpConfiguration> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<DscpConfigurationInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return inner.mapPage(inner1 -> new DscpConfigurationImpl(inner1, this.manager()));
    }

    public PagedIterable<DscpConfiguration> list() {
        PagedIterable<DscpConfigurationInner> inner = this.serviceClient().list();
        return inner.mapPage(inner1 -> new DscpConfigurationImpl(inner1, this.manager()));
    }

    public PagedIterable<DscpConfiguration> list(Context context) {
        PagedIterable<DscpConfigurationInner> inner = this.serviceClient().list(context);
        return inner.mapPage(inner1 -> new DscpConfigurationImpl(inner1, this.manager()));
    }

    private DscpConfigurationsClient serviceClient() {
        return this.innerClient;
    }

    private NetworkManager manager() {
        return this.serviceManager;
    }

    public DscpConfigurationImpl define(String name) {
        return new DscpConfigurationImpl(name, this.manager());
    }
}
