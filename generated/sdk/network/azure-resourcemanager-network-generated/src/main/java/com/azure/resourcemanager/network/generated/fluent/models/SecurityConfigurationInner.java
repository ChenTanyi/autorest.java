// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.models.NetworkManagerSecurityGroupItem;
import com.azure.resourcemanager.network.generated.models.ProvisioningState;
import com.azure.resourcemanager.network.generated.models.SecurityType;
import com.azure.resourcemanager.network.generated.models.SystemData;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Defines the security Configuration. */
@JsonFlatten
@Fluent
public class SecurityConfigurationInner extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SecurityConfigurationInner.class);

    /*
     * The system metadata related to this resource.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /*
     * A display name of the security Configuration.
     */
    @JsonProperty(value = "properties.displayName")
    private String displayName;

    /*
     * A description of the security Configuration.
     */
    @JsonProperty(value = "properties.description")
    private String description;

    /*
     * Security Type.
     */
    @JsonProperty(value = "properties.securityType")
    private SecurityType securityType;

    /*
     * Flag if need to delete existing network security groups.
     */
    @JsonProperty(value = "properties.deleteExistingNSGs")
    private Boolean deleteExistingNSGs;

    /*
     * Groups for configuration
     */
    @JsonProperty(value = "properties.appliesToGroups")
    private List<NetworkManagerSecurityGroupItem> appliesToGroups;

    /*
     * The provisioning state of the scope assignment resource.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * A unique read-only string that changes whenever the resource is updated.
     */
    @JsonProperty(value = "etag", access = JsonProperty.Access.WRITE_ONLY)
    private String etag;

    /**
     * Get the systemData property: The system metadata related to this resource.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the displayName property: A display name of the security Configuration.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: A display name of the security Configuration.
     *
     * @param displayName the displayName value to set.
     * @return the SecurityConfigurationInner object itself.
     */
    public SecurityConfigurationInner withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the description property: A description of the security Configuration.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: A description of the security Configuration.
     *
     * @param description the description value to set.
     * @return the SecurityConfigurationInner object itself.
     */
    public SecurityConfigurationInner withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the securityType property: Security Type.
     *
     * @return the securityType value.
     */
    public SecurityType securityType() {
        return this.securityType;
    }

    /**
     * Set the securityType property: Security Type.
     *
     * @param securityType the securityType value to set.
     * @return the SecurityConfigurationInner object itself.
     */
    public SecurityConfigurationInner withSecurityType(SecurityType securityType) {
        this.securityType = securityType;
        return this;
    }

    /**
     * Get the deleteExistingNSGs property: Flag if need to delete existing network security groups.
     *
     * @return the deleteExistingNSGs value.
     */
    public Boolean deleteExistingNSGs() {
        return this.deleteExistingNSGs;
    }

    /**
     * Set the deleteExistingNSGs property: Flag if need to delete existing network security groups.
     *
     * @param deleteExistingNSGs the deleteExistingNSGs value to set.
     * @return the SecurityConfigurationInner object itself.
     */
    public SecurityConfigurationInner withDeleteExistingNSGs(Boolean deleteExistingNSGs) {
        this.deleteExistingNSGs = deleteExistingNSGs;
        return this;
    }

    /**
     * Get the appliesToGroups property: Groups for configuration.
     *
     * @return the appliesToGroups value.
     */
    public List<NetworkManagerSecurityGroupItem> appliesToGroups() {
        return this.appliesToGroups;
    }

    /**
     * Set the appliesToGroups property: Groups for configuration.
     *
     * @param appliesToGroups the appliesToGroups value to set.
     * @return the SecurityConfigurationInner object itself.
     */
    public SecurityConfigurationInner withAppliesToGroups(List<NetworkManagerSecurityGroupItem> appliesToGroups) {
        this.appliesToGroups = appliesToGroups;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the scope assignment resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the etag property: A unique read-only string that changes whenever the resource is updated.
     *
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (systemData() != null) {
            systemData().validate();
        }
        if (appliesToGroups() != null) {
            appliesToGroups().forEach(e -> e.validate());
        }
    }
}
