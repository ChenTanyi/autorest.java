// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.network.generated.fluent.models.SecurityConfigurationImportResultInner;
import com.azure.resourcemanager.network.generated.fluent.models.SecurityConfigurationInner;
import com.azure.resourcemanager.network.generated.fluent.models.SecurityConfigurationRuleInner;
import com.azure.resourcemanager.network.generated.models.NetworkManagerSecurityConfigurationImport;

/** An instance of this class provides access to all the operations defined in SecurityConfigurationsClient. */
public interface SecurityConfigurationsClient {
    /**
     * Lists all the network manager security configurations in a network manager, in a paginated format.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkManagerName The name of the network manager.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of managed network security configurations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SecurityConfigurationInner> list(String resourceGroupName, String networkManagerName);

    /**
     * Lists all the network manager security configurations in a network manager, in a paginated format.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkManagerName The name of the network manager.
     * @param top An optional query parameter which specifies the maximum number of records to be returned by the
     *     server.
     * @param skipToken SkipToken is only used if a previous operation returned a partial result. If a previous response
     *     contains a nextLink element, the value of the nextLink element will include a skipToken parameter that
     *     specifies a starting point to use for subsequent calls.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of managed network security configurations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SecurityConfigurationInner> list(
        String resourceGroupName, String networkManagerName, Integer top, String skipToken, Context context);

    /**
     * Imports network security rules to network manager security rules.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkManagerName The name of the network manager.
     * @param configurationName The name of the network manager security Configuration.
     * @param parameters Import Security configuration parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return security configuration import Result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SecurityConfigurationImportResultInner importMethod(
        String resourceGroupName,
        String networkManagerName,
        String configurationName,
        NetworkManagerSecurityConfigurationImport parameters);

    /**
     * Imports network security rules to network manager security rules.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkManagerName The name of the network manager.
     * @param configurationName The name of the network manager security Configuration.
     * @param parameters Import Security configuration parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return security configuration import Result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SecurityConfigurationImportResultInner> importMethodWithResponse(
        String resourceGroupName,
        String networkManagerName,
        String configurationName,
        NetworkManagerSecurityConfigurationImport parameters,
        Context context);

    /**
     * The operation to evaluate import NSG to security configurations.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkManagerName The name of the network manager.
     * @param configurationName The name of the network manager security Configuration.
     * @param parameters Import security configuration parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return security configuration rule list result.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SecurityConfigurationRuleInner> evaluateImport(
        String resourceGroupName,
        String networkManagerName,
        String configurationName,
        NetworkManagerSecurityConfigurationImport parameters);

    /**
     * The operation to evaluate import NSG to security configurations.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkManagerName The name of the network manager.
     * @param configurationName The name of the network manager security Configuration.
     * @param parameters Import security configuration parameter.
     * @param top An optional query parameter which specifies the maximum number of records to be returned by the
     *     server.
     * @param skipToken SkipToken is only used if a previous operation returned a partial result. If a previous response
     *     contains a nextLink element, the value of the nextLink element will include a skipToken parameter that
     *     specifies a starting point to use for subsequent calls.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return security configuration rule list result.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SecurityConfigurationRuleInner> evaluateImport(
        String resourceGroupName,
        String networkManagerName,
        String configurationName,
        NetworkManagerSecurityConfigurationImport parameters,
        Integer top,
        String skipToken,
        Context context);

    /**
     * Retrieves a network manager security Configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkManagerName The name of the network manager.
     * @param configurationName The name of the network manager security Configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the security Configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SecurityConfigurationInner get(String resourceGroupName, String networkManagerName, String configurationName);

    /**
     * Retrieves a network manager security Configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkManagerName The name of the network manager.
     * @param configurationName The name of the network manager security Configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the security Configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SecurityConfigurationInner> getWithResponse(
        String resourceGroupName, String networkManagerName, String configurationName, Context context);

    /**
     * Creates or updates a network manager security Configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkManagerName The name of the network manager.
     * @param configurationName The name of the network manager security Configuration.
     * @param securityConfiguration The security configuration to create or update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the security Configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SecurityConfigurationInner createOrUpdate(
        String resourceGroupName,
        String networkManagerName,
        String configurationName,
        SecurityConfigurationInner securityConfiguration);

    /**
     * Creates or updates a network manager security Configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkManagerName The name of the network manager.
     * @param configurationName The name of the network manager security Configuration.
     * @param securityConfiguration The security configuration to create or update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the security Configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SecurityConfigurationInner> createOrUpdateWithResponse(
        String resourceGroupName,
        String networkManagerName,
        String configurationName,
        SecurityConfigurationInner securityConfiguration,
        Context context);

    /**
     * Deletes a network manager security Configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkManagerName The name of the network manager.
     * @param configurationName The name of the network manager security Configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String networkManagerName, String configurationName);

    /**
     * Deletes a network manager security Configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkManagerName The name of the network manager.
     * @param configurationName The name of the network manager security Configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(
        String resourceGroupName, String networkManagerName, String configurationName, Context context);
}
