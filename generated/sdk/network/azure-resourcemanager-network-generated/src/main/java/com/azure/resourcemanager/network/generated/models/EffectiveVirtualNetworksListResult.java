// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.fluent.models.EffectiveVirtualNetworkInner;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Result of the request to list Effective Virtual Network. It contains a list of groups and a URL link to get the next
 * set of results.
 */
@Fluent
public final class EffectiveVirtualNetworksListResult {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(EffectiveVirtualNetworksListResult.class);

    /*
     * Gets a page of EffectiveVirtualNetwork
     */
    @JsonProperty(value = "value")
    private List<EffectiveVirtualNetworkInner> value;

    /*
     * Total Records.
     */
    @JsonProperty(value = "totalRecords")
    private Integer totalRecords;

    /*
     * First Index.
     */
    @JsonProperty(value = "firstIndex")
    private Integer firstIndex;

    /*
     * Page Size.
     */
    @JsonProperty(value = "pageSize")
    private Integer pageSize;

    /*
     * Gets the URL to get the next set of results.
     */
    @JsonProperty(value = "nextLink")
    private String nextLink;

    /**
     * Get the value property: Gets a page of EffectiveVirtualNetwork.
     *
     * @return the value value.
     */
    public List<EffectiveVirtualNetworkInner> value() {
        return this.value;
    }

    /**
     * Set the value property: Gets a page of EffectiveVirtualNetwork.
     *
     * @param value the value value to set.
     * @return the EffectiveVirtualNetworksListResult object itself.
     */
    public EffectiveVirtualNetworksListResult withValue(List<EffectiveVirtualNetworkInner> value) {
        this.value = value;
        return this;
    }

    /**
     * Get the totalRecords property: Total Records.
     *
     * @return the totalRecords value.
     */
    public Integer totalRecords() {
        return this.totalRecords;
    }

    /**
     * Set the totalRecords property: Total Records.
     *
     * @param totalRecords the totalRecords value to set.
     * @return the EffectiveVirtualNetworksListResult object itself.
     */
    public EffectiveVirtualNetworksListResult withTotalRecords(Integer totalRecords) {
        this.totalRecords = totalRecords;
        return this;
    }

    /**
     * Get the firstIndex property: First Index.
     *
     * @return the firstIndex value.
     */
    public Integer firstIndex() {
        return this.firstIndex;
    }

    /**
     * Set the firstIndex property: First Index.
     *
     * @param firstIndex the firstIndex value to set.
     * @return the EffectiveVirtualNetworksListResult object itself.
     */
    public EffectiveVirtualNetworksListResult withFirstIndex(Integer firstIndex) {
        this.firstIndex = firstIndex;
        return this;
    }

    /**
     * Get the pageSize property: Page Size.
     *
     * @return the pageSize value.
     */
    public Integer pageSize() {
        return this.pageSize;
    }

    /**
     * Set the pageSize property: Page Size.
     *
     * @param pageSize the pageSize value to set.
     * @return the EffectiveVirtualNetworksListResult object itself.
     */
    public EffectiveVirtualNetworksListResult withPageSize(Integer pageSize) {
        this.pageSize = pageSize;
        return this;
    }

    /**
     * Get the nextLink property: Gets the URL to get the next set of results.
     *
     * @return the nextLink value.
     */
    public String nextLink() {
        return this.nextLink;
    }

    /**
     * Set the nextLink property: Gets the URL to get the next set of results.
     *
     * @param nextLink the nextLink value to set.
     * @return the EffectiveVirtualNetworksListResult object itself.
     */
    public EffectiveVirtualNetworksListResult withNextLink(String nextLink) {
        this.nextLink = nextLink;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (value() != null) {
            value().forEach(e -> e.validate());
        }
    }
}
