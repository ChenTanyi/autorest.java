// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Network manager security configuration import parameters. */
@Fluent
public final class NetworkManagerSecurityConfigurationImport {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(NetworkManagerSecurityConfigurationImport.class);

    /*
     * List of nsg uris.
     */
    @JsonProperty(value = "networkSecurityGroupImports")
    private List<NetworkSecurityGroupImport> networkSecurityGroupImports;

    /*
     * Flag if import deny rules as admin rules.
     */
    @JsonProperty(value = "importDenyRulesAsAdminRules")
    private Boolean importDenyRulesAsAdminRules;

    /*
     * Admin security configuration Uri.
     */
    @JsonProperty(value = "adminSecurityConfigurationUri")
    private String adminSecurityConfigurationUri;

    /*
     * Flag if need to remove allow vnet inbound rule.
     */
    @JsonProperty(value = "removeAllowVnetInboundRule")
    private Boolean removeAllowVnetInboundRule;

    /*
     * Flag if need to remove allow azure load balancer inbound rule.
     */
    @JsonProperty(value = "removeAllowAzureLoadBalancerInboundRule")
    private Boolean removeAllowAzureLoadBalancerInboundRule;

    /*
     * Flag if need to remove allow vnet outbound rule.
     */
    @JsonProperty(value = "removeAllowVnetOutboundRule")
    private Boolean removeAllowVnetOutboundRule;

    /*
     * Flag if need to remove allow Internet outbound rule.
     */
    @JsonProperty(value = "removeAllowInternetOutboundRule")
    private Boolean removeAllowInternetOutboundRule;

    /**
     * Get the networkSecurityGroupImports property: List of nsg uris.
     *
     * @return the networkSecurityGroupImports value.
     */
    public List<NetworkSecurityGroupImport> networkSecurityGroupImports() {
        return this.networkSecurityGroupImports;
    }

    /**
     * Set the networkSecurityGroupImports property: List of nsg uris.
     *
     * @param networkSecurityGroupImports the networkSecurityGroupImports value to set.
     * @return the NetworkManagerSecurityConfigurationImport object itself.
     */
    public NetworkManagerSecurityConfigurationImport withNetworkSecurityGroupImports(
        List<NetworkSecurityGroupImport> networkSecurityGroupImports) {
        this.networkSecurityGroupImports = networkSecurityGroupImports;
        return this;
    }

    /**
     * Get the importDenyRulesAsAdminRules property: Flag if import deny rules as admin rules.
     *
     * @return the importDenyRulesAsAdminRules value.
     */
    public Boolean importDenyRulesAsAdminRules() {
        return this.importDenyRulesAsAdminRules;
    }

    /**
     * Set the importDenyRulesAsAdminRules property: Flag if import deny rules as admin rules.
     *
     * @param importDenyRulesAsAdminRules the importDenyRulesAsAdminRules value to set.
     * @return the NetworkManagerSecurityConfigurationImport object itself.
     */
    public NetworkManagerSecurityConfigurationImport withImportDenyRulesAsAdminRules(
        Boolean importDenyRulesAsAdminRules) {
        this.importDenyRulesAsAdminRules = importDenyRulesAsAdminRules;
        return this;
    }

    /**
     * Get the adminSecurityConfigurationUri property: Admin security configuration Uri.
     *
     * @return the adminSecurityConfigurationUri value.
     */
    public String adminSecurityConfigurationUri() {
        return this.adminSecurityConfigurationUri;
    }

    /**
     * Set the adminSecurityConfigurationUri property: Admin security configuration Uri.
     *
     * @param adminSecurityConfigurationUri the adminSecurityConfigurationUri value to set.
     * @return the NetworkManagerSecurityConfigurationImport object itself.
     */
    public NetworkManagerSecurityConfigurationImport withAdminSecurityConfigurationUri(
        String adminSecurityConfigurationUri) {
        this.adminSecurityConfigurationUri = adminSecurityConfigurationUri;
        return this;
    }

    /**
     * Get the removeAllowVnetInboundRule property: Flag if need to remove allow vnet inbound rule.
     *
     * @return the removeAllowVnetInboundRule value.
     */
    public Boolean removeAllowVnetInboundRule() {
        return this.removeAllowVnetInboundRule;
    }

    /**
     * Set the removeAllowVnetInboundRule property: Flag if need to remove allow vnet inbound rule.
     *
     * @param removeAllowVnetInboundRule the removeAllowVnetInboundRule value to set.
     * @return the NetworkManagerSecurityConfigurationImport object itself.
     */
    public NetworkManagerSecurityConfigurationImport withRemoveAllowVnetInboundRule(
        Boolean removeAllowVnetInboundRule) {
        this.removeAllowVnetInboundRule = removeAllowVnetInboundRule;
        return this;
    }

    /**
     * Get the removeAllowAzureLoadBalancerInboundRule property: Flag if need to remove allow azure load balancer
     * inbound rule.
     *
     * @return the removeAllowAzureLoadBalancerInboundRule value.
     */
    public Boolean removeAllowAzureLoadBalancerInboundRule() {
        return this.removeAllowAzureLoadBalancerInboundRule;
    }

    /**
     * Set the removeAllowAzureLoadBalancerInboundRule property: Flag if need to remove allow azure load balancer
     * inbound rule.
     *
     * @param removeAllowAzureLoadBalancerInboundRule the removeAllowAzureLoadBalancerInboundRule value to set.
     * @return the NetworkManagerSecurityConfigurationImport object itself.
     */
    public NetworkManagerSecurityConfigurationImport withRemoveAllowAzureLoadBalancerInboundRule(
        Boolean removeAllowAzureLoadBalancerInboundRule) {
        this.removeAllowAzureLoadBalancerInboundRule = removeAllowAzureLoadBalancerInboundRule;
        return this;
    }

    /**
     * Get the removeAllowVnetOutboundRule property: Flag if need to remove allow vnet outbound rule.
     *
     * @return the removeAllowVnetOutboundRule value.
     */
    public Boolean removeAllowVnetOutboundRule() {
        return this.removeAllowVnetOutboundRule;
    }

    /**
     * Set the removeAllowVnetOutboundRule property: Flag if need to remove allow vnet outbound rule.
     *
     * @param removeAllowVnetOutboundRule the removeAllowVnetOutboundRule value to set.
     * @return the NetworkManagerSecurityConfigurationImport object itself.
     */
    public NetworkManagerSecurityConfigurationImport withRemoveAllowVnetOutboundRule(
        Boolean removeAllowVnetOutboundRule) {
        this.removeAllowVnetOutboundRule = removeAllowVnetOutboundRule;
        return this;
    }

    /**
     * Get the removeAllowInternetOutboundRule property: Flag if need to remove allow Internet outbound rule.
     *
     * @return the removeAllowInternetOutboundRule value.
     */
    public Boolean removeAllowInternetOutboundRule() {
        return this.removeAllowInternetOutboundRule;
    }

    /**
     * Set the removeAllowInternetOutboundRule property: Flag if need to remove allow Internet outbound rule.
     *
     * @param removeAllowInternetOutboundRule the removeAllowInternetOutboundRule value to set.
     * @return the NetworkManagerSecurityConfigurationImport object itself.
     */
    public NetworkManagerSecurityConfigurationImport withRemoveAllowInternetOutboundRule(
        Boolean removeAllowInternetOutboundRule) {
        this.removeAllowInternetOutboundRule = removeAllowInternetOutboundRule;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (networkSecurityGroupImports() != null) {
            networkSecurityGroupImports().forEach(e -> e.validate());
        }
    }
}
