// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.models.GroupMembersItem;
import com.azure.resourcemanager.network.generated.models.MemberType;
import com.azure.resourcemanager.network.generated.models.ProvisioningState;
import com.azure.resourcemanager.network.generated.models.SystemData;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The network group resource. */
@JsonFlatten
@Fluent
public class NetworkGroupInner extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(NetworkGroupInner.class);

    /*
     * The system metadata related to this resource.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /*
     * A friendly name for the network group.
     */
    @JsonProperty(value = "properties.displayName")
    private String displayName;

    /*
     * A description of the network group.
     */
    @JsonProperty(value = "properties.description")
    private String description;

    /*
     * Group member type.
     */
    @JsonProperty(value = "properties.memberType")
    private MemberType memberType;

    /*
     * Group members of network group.
     */
    @JsonProperty(value = "properties.groupMembers")
    private List<GroupMembersItem> groupMembers;

    /*
     * Network group conditional filter.
     */
    @JsonProperty(value = "properties.conditionalMembership")
    private String conditionalMembership;

    /*
     * The provisioning state of the scope assignment resource.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * A unique read-only string that changes whenever the resource is updated.
     */
    @JsonProperty(value = "etag", access = JsonProperty.Access.WRITE_ONLY)
    private String etag;

    /**
     * Get the systemData property: The system metadata related to this resource.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the displayName property: A friendly name for the network group.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: A friendly name for the network group.
     *
     * @param displayName the displayName value to set.
     * @return the NetworkGroupInner object itself.
     */
    public NetworkGroupInner withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the description property: A description of the network group.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: A description of the network group.
     *
     * @param description the description value to set.
     * @return the NetworkGroupInner object itself.
     */
    public NetworkGroupInner withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the memberType property: Group member type.
     *
     * @return the memberType value.
     */
    public MemberType memberType() {
        return this.memberType;
    }

    /**
     * Set the memberType property: Group member type.
     *
     * @param memberType the memberType value to set.
     * @return the NetworkGroupInner object itself.
     */
    public NetworkGroupInner withMemberType(MemberType memberType) {
        this.memberType = memberType;
        return this;
    }

    /**
     * Get the groupMembers property: Group members of network group.
     *
     * @return the groupMembers value.
     */
    public List<GroupMembersItem> groupMembers() {
        return this.groupMembers;
    }

    /**
     * Set the groupMembers property: Group members of network group.
     *
     * @param groupMembers the groupMembers value to set.
     * @return the NetworkGroupInner object itself.
     */
    public NetworkGroupInner withGroupMembers(List<GroupMembersItem> groupMembers) {
        this.groupMembers = groupMembers;
        return this;
    }

    /**
     * Get the conditionalMembership property: Network group conditional filter.
     *
     * @return the conditionalMembership value.
     */
    public String conditionalMembership() {
        return this.conditionalMembership;
    }

    /**
     * Set the conditionalMembership property: Network group conditional filter.
     *
     * @param conditionalMembership the conditionalMembership value to set.
     * @return the NetworkGroupInner object itself.
     */
    public NetworkGroupInner withConditionalMembership(String conditionalMembership) {
        this.conditionalMembership = conditionalMembership;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the scope assignment resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the etag property: A unique read-only string that changes whenever the resource is updated.
     *
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (systemData() != null) {
            systemData().validate();
        }
        if (groupMembers() != null) {
            groupMembers().forEach(e -> e.validate());
        }
    }
}
