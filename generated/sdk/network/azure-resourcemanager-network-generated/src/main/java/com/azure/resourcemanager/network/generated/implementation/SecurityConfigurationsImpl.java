// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.fluent.SecurityConfigurationsClient;
import com.azure.resourcemanager.network.generated.fluent.models.SecurityConfigurationImportResultInner;
import com.azure.resourcemanager.network.generated.fluent.models.SecurityConfigurationInner;
import com.azure.resourcemanager.network.generated.fluent.models.SecurityConfigurationRuleInner;
import com.azure.resourcemanager.network.generated.models.NetworkManagerSecurityConfigurationImport;
import com.azure.resourcemanager.network.generated.models.SecurityConfiguration;
import com.azure.resourcemanager.network.generated.models.SecurityConfigurationImportResult;
import com.azure.resourcemanager.network.generated.models.SecurityConfigurationRule;
import com.azure.resourcemanager.network.generated.models.SecurityConfigurations;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class SecurityConfigurationsImpl implements SecurityConfigurations {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SecurityConfigurationsImpl.class);

    private final SecurityConfigurationsClient innerClient;

    private final com.azure.resourcemanager.network.generated.NetworkManager serviceManager;

    public SecurityConfigurationsImpl(
        SecurityConfigurationsClient innerClient,
        com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<SecurityConfiguration> list(String resourceGroupName, String networkManagerName) {
        PagedIterable<SecurityConfigurationInner> inner =
            this.serviceClient().list(resourceGroupName, networkManagerName);
        return Utils.mapPage(inner, inner1 -> new SecurityConfigurationImpl(inner1, this.manager()));
    }

    public PagedIterable<SecurityConfiguration> list(
        String resourceGroupName, String networkManagerName, Integer top, String skipToken, Context context) {
        PagedIterable<SecurityConfigurationInner> inner =
            this.serviceClient().list(resourceGroupName, networkManagerName, top, skipToken, context);
        return Utils.mapPage(inner, inner1 -> new SecurityConfigurationImpl(inner1, this.manager()));
    }

    public SecurityConfigurationImportResult importMethod(
        String resourceGroupName,
        String networkManagerName,
        String configurationName,
        NetworkManagerSecurityConfigurationImport parameters) {
        SecurityConfigurationImportResultInner inner =
            this.serviceClient().importMethod(resourceGroupName, networkManagerName, configurationName, parameters);
        if (inner != null) {
            return new SecurityConfigurationImportResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SecurityConfigurationImportResult> importMethodWithResponse(
        String resourceGroupName,
        String networkManagerName,
        String configurationName,
        NetworkManagerSecurityConfigurationImport parameters,
        Context context) {
        Response<SecurityConfigurationImportResultInner> inner =
            this
                .serviceClient()
                .importMethodWithResponse(
                    resourceGroupName, networkManagerName, configurationName, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SecurityConfigurationImportResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<SecurityConfigurationRule> evaluateImport(
        String resourceGroupName,
        String networkManagerName,
        String configurationName,
        NetworkManagerSecurityConfigurationImport parameters) {
        PagedIterable<SecurityConfigurationRuleInner> inner =
            this.serviceClient().evaluateImport(resourceGroupName, networkManagerName, configurationName, parameters);
        return Utils.mapPage(inner, inner1 -> new SecurityConfigurationRuleImpl(inner1, this.manager()));
    }

    public PagedIterable<SecurityConfigurationRule> evaluateImport(
        String resourceGroupName,
        String networkManagerName,
        String configurationName,
        NetworkManagerSecurityConfigurationImport parameters,
        Integer top,
        String skipToken,
        Context context) {
        PagedIterable<SecurityConfigurationRuleInner> inner =
            this
                .serviceClient()
                .evaluateImport(
                    resourceGroupName, networkManagerName, configurationName, parameters, top, skipToken, context);
        return Utils.mapPage(inner, inner1 -> new SecurityConfigurationRuleImpl(inner1, this.manager()));
    }

    public SecurityConfiguration get(String resourceGroupName, String networkManagerName, String configurationName) {
        SecurityConfigurationInner inner =
            this.serviceClient().get(resourceGroupName, networkManagerName, configurationName);
        if (inner != null) {
            return new SecurityConfigurationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SecurityConfiguration> getWithResponse(
        String resourceGroupName, String networkManagerName, String configurationName, Context context) {
        Response<SecurityConfigurationInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, networkManagerName, configurationName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SecurityConfigurationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String networkManagerName, String configurationName) {
        this.serviceClient().delete(resourceGroupName, networkManagerName, configurationName);
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName, String networkManagerName, String configurationName, Context context) {
        return this
            .serviceClient()
            .deleteWithResponse(resourceGroupName, networkManagerName, configurationName, context);
    }

    public SecurityConfiguration getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = Utils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String configurationName = Utils.getValueFromIdByName(id, "securityConfigurations");
        if (configurationName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'securityConfigurations'.",
                                id)));
        }
        return this.getWithResponse(resourceGroupName, networkManagerName, configurationName, Context.NONE).getValue();
    }

    public Response<SecurityConfiguration> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = Utils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String configurationName = Utils.getValueFromIdByName(id, "securityConfigurations");
        if (configurationName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'securityConfigurations'.",
                                id)));
        }
        return this.getWithResponse(resourceGroupName, networkManagerName, configurationName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = Utils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String configurationName = Utils.getValueFromIdByName(id, "securityConfigurations");
        if (configurationName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'securityConfigurations'.",
                                id)));
        }
        this.deleteWithResponse(resourceGroupName, networkManagerName, configurationName, Context.NONE).getValue();
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = Utils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String configurationName = Utils.getValueFromIdByName(id, "securityConfigurations");
        if (configurationName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'securityConfigurations'.",
                                id)));
        }
        return this.deleteWithResponse(resourceGroupName, networkManagerName, configurationName, context);
    }

    private SecurityConfigurationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.network.generated.NetworkManager manager() {
        return this.serviceManager;
    }

    public SecurityConfigurationImpl define(String name) {
        return new SecurityConfigurationImpl(name, this.manager());
    }
}
