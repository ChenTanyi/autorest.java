// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.resourcemanager.network.generated.NetworkManager;
import com.azure.resourcemanager.network.generated.fluent.VirtualHubBgpConnectionsClient;
import com.azure.resourcemanager.network.generated.fluent.models.BgpConnectionInner;
import com.azure.resourcemanager.network.generated.fluent.models.PeerRouteListInner;
import com.azure.resourcemanager.network.generated.models.BgpConnection;
import com.azure.resourcemanager.network.generated.models.PeerRouteList;
import com.azure.resourcemanager.network.generated.models.VirtualHubBgpConnections;

public final class VirtualHubBgpConnectionsImpl implements VirtualHubBgpConnections {
    private final VirtualHubBgpConnectionsClient innerClient;

    private final NetworkManager serviceManager;

    public VirtualHubBgpConnectionsImpl(VirtualHubBgpConnectionsClient innerClient, NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public BgpConnection get(String resourceGroupName, String virtualHubName, String connectionName) {
        BgpConnectionInner inner = this.serviceClient().get(resourceGroupName, virtualHubName, connectionName);
        if (inner != null) {
            return new BgpConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BgpConnection> getWithResponse(
        String resourceGroupName, String virtualHubName, String connectionName, Context context) {
        Response<BgpConnectionInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, virtualHubName, connectionName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BgpConnectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String virtualHubName, String connectionName) {
        this.serviceClient().delete(resourceGroupName, virtualHubName, connectionName);
    }

    public void delete(String resourceGroupName, String virtualHubName, String connectionName, Context context) {
        this.serviceClient().delete(resourceGroupName, virtualHubName, connectionName, context);
    }

    public PagedIterable<BgpConnection> list(String resourceGroupName, String virtualHubName) {
        PagedIterable<BgpConnectionInner> inner = this.serviceClient().list(resourceGroupName, virtualHubName);
        return inner.mapPage(inner1 -> new BgpConnectionImpl(inner1, this.manager()));
    }

    public PagedIterable<BgpConnection> list(String resourceGroupName, String virtualHubName, Context context) {
        PagedIterable<BgpConnectionInner> inner = this.serviceClient().list(resourceGroupName, virtualHubName, context);
        return inner.mapPage(inner1 -> new BgpConnectionImpl(inner1, this.manager()));
    }

    public PeerRouteList listLearnedRoutes(String resourceGroupName, String hubName, String connectionName) {
        PeerRouteListInner inner = this.serviceClient().listLearnedRoutes(resourceGroupName, hubName, connectionName);
        if (inner != null) {
            return new PeerRouteListImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PeerRouteList listLearnedRoutes(
        String resourceGroupName, String hubName, String connectionName, Context context) {
        PeerRouteListInner inner =
            this.serviceClient().listLearnedRoutes(resourceGroupName, hubName, connectionName, context);
        if (inner != null) {
            return new PeerRouteListImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PeerRouteList listAdvertisedRoutes(String resourceGroupName, String hubName, String connectionName) {
        PeerRouteListInner inner =
            this.serviceClient().listAdvertisedRoutes(resourceGroupName, hubName, connectionName);
        if (inner != null) {
            return new PeerRouteListImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PeerRouteList listAdvertisedRoutes(
        String resourceGroupName, String hubName, String connectionName, Context context) {
        PeerRouteListInner inner =
            this.serviceClient().listAdvertisedRoutes(resourceGroupName, hubName, connectionName, context);
        if (inner != null) {
            return new PeerRouteListImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public BgpConnection getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        String virtualHubName = Utils.getValueFromIdByName(id, "virtualHubs");
        String connectionName = Utils.getValueFromIdByName(id, "bgpConnections");
        return this.getWithResponse(resourceGroupName, virtualHubName, connectionName, Context.NONE).getValue();
    }

    public Response<BgpConnection> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        String virtualHubName = Utils.getValueFromIdByName(id, "virtualHubs");
        String connectionName = Utils.getValueFromIdByName(id, "bgpConnections");
        return this.getWithResponse(resourceGroupName, virtualHubName, connectionName, context);
    }

    private VirtualHubBgpConnectionsClient serviceClient() {
        return this.innerClient;
    }

    private NetworkManager manager() {
        return this.serviceManager;
    }

    public BgpConnectionImpl define(String name) {
        return new BgpConnectionImpl(name, this.manager());
    }
}
