// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.models.ConnectivityGroupItem;
import com.azure.resourcemanager.network.generated.models.ConnectivityTopology;
import com.azure.resourcemanager.network.generated.models.ProvisioningState;
import com.azure.resourcemanager.network.generated.models.SystemData;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The network manager connectivity configuration resource. */
@JsonFlatten
@Fluent
public class ConnectivityConfigurationInner extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ConnectivityConfigurationInner.class);

    /*
     * The system metadata related to this resource.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /*
     * A friendly name for the resource.
     */
    @JsonProperty(value = "properties.displayName")
    private String displayName;

    /*
     * A description of the connectivity configuration.
     */
    @JsonProperty(value = "properties.description")
    private String description;

    /*
     * Connectivity topology type.
     */
    @JsonProperty(value = "properties.connectivityTopology")
    private ConnectivityTopology connectivityTopology;

    /*
     * The hub vnet Id.
     */
    @JsonProperty(value = "properties.hubId")
    private String hubId;

    /*
     * Flag if global mesh is supported.
     */
    @JsonProperty(value = "properties.isGlobal")
    private Boolean isGlobal;

    /*
     * Groups for configuration
     */
    @JsonProperty(value = "properties.appliesToGroups")
    private List<ConnectivityGroupItem> appliesToGroups;

    /*
     * The provisioning state of the connectivity configuration resource.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * Flag if need to remove current existing peerings.
     */
    @JsonProperty(value = "properties.deleteExistingPeering")
    private Boolean deleteExistingPeering;

    /*
     * A unique read-only string that changes whenever the resource is updated.
     */
    @JsonProperty(value = "etag", access = JsonProperty.Access.WRITE_ONLY)
    private String etag;

    /**
     * Get the systemData property: The system metadata related to this resource.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the displayName property: A friendly name for the resource.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: A friendly name for the resource.
     *
     * @param displayName the displayName value to set.
     * @return the ConnectivityConfigurationInner object itself.
     */
    public ConnectivityConfigurationInner withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the description property: A description of the connectivity configuration.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: A description of the connectivity configuration.
     *
     * @param description the description value to set.
     * @return the ConnectivityConfigurationInner object itself.
     */
    public ConnectivityConfigurationInner withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the connectivityTopology property: Connectivity topology type.
     *
     * @return the connectivityTopology value.
     */
    public ConnectivityTopology connectivityTopology() {
        return this.connectivityTopology;
    }

    /**
     * Set the connectivityTopology property: Connectivity topology type.
     *
     * @param connectivityTopology the connectivityTopology value to set.
     * @return the ConnectivityConfigurationInner object itself.
     */
    public ConnectivityConfigurationInner withConnectivityTopology(ConnectivityTopology connectivityTopology) {
        this.connectivityTopology = connectivityTopology;
        return this;
    }

    /**
     * Get the hubId property: The hub vnet Id.
     *
     * @return the hubId value.
     */
    public String hubId() {
        return this.hubId;
    }

    /**
     * Set the hubId property: The hub vnet Id.
     *
     * @param hubId the hubId value to set.
     * @return the ConnectivityConfigurationInner object itself.
     */
    public ConnectivityConfigurationInner withHubId(String hubId) {
        this.hubId = hubId;
        return this;
    }

    /**
     * Get the isGlobal property: Flag if global mesh is supported.
     *
     * @return the isGlobal value.
     */
    public Boolean isGlobal() {
        return this.isGlobal;
    }

    /**
     * Set the isGlobal property: Flag if global mesh is supported.
     *
     * @param isGlobal the isGlobal value to set.
     * @return the ConnectivityConfigurationInner object itself.
     */
    public ConnectivityConfigurationInner withIsGlobal(Boolean isGlobal) {
        this.isGlobal = isGlobal;
        return this;
    }

    /**
     * Get the appliesToGroups property: Groups for configuration.
     *
     * @return the appliesToGroups value.
     */
    public List<ConnectivityGroupItem> appliesToGroups() {
        return this.appliesToGroups;
    }

    /**
     * Set the appliesToGroups property: Groups for configuration.
     *
     * @param appliesToGroups the appliesToGroups value to set.
     * @return the ConnectivityConfigurationInner object itself.
     */
    public ConnectivityConfigurationInner withAppliesToGroups(List<ConnectivityGroupItem> appliesToGroups) {
        this.appliesToGroups = appliesToGroups;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the connectivity configuration resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the deleteExistingPeering property: Flag if need to remove current existing peerings.
     *
     * @return the deleteExistingPeering value.
     */
    public Boolean deleteExistingPeering() {
        return this.deleteExistingPeering;
    }

    /**
     * Set the deleteExistingPeering property: Flag if need to remove current existing peerings.
     *
     * @param deleteExistingPeering the deleteExistingPeering value to set.
     * @return the ConnectivityConfigurationInner object itself.
     */
    public ConnectivityConfigurationInner withDeleteExistingPeering(Boolean deleteExistingPeering) {
        this.deleteExistingPeering = deleteExistingPeering;
        return this;
    }

    /**
     * Get the etag property: A unique read-only string that changes whenever the resource is updated.
     *
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (systemData() != null) {
            systemData().validate();
        }
        if (appliesToGroups() != null) {
            appliesToGroups().forEach(e -> e.validate());
        }
    }
}
