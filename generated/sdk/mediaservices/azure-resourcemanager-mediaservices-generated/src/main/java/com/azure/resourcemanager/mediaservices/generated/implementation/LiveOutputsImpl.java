// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.resourcemanager.mediaservices.generated.MediaservicesManager;
import com.azure.resourcemanager.mediaservices.generated.fluent.LiveOutputsClient;
import com.azure.resourcemanager.mediaservices.generated.fluent.models.LiveOutputInner;
import com.azure.resourcemanager.mediaservices.generated.models.LiveOutput;
import com.azure.resourcemanager.mediaservices.generated.models.LiveOutputs;

public final class LiveOutputsImpl implements LiveOutputs {
    private final LiveOutputsClient innerClient;

    private final MediaservicesManager serviceManager;

    public LiveOutputsImpl(LiveOutputsClient innerClient, MediaservicesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<LiveOutput> list(String resourceGroupName, String accountName, String liveEventName) {
        PagedIterable<LiveOutputInner> inner = this.serviceClient().list(resourceGroupName, accountName, liveEventName);
        return inner.mapPage(inner1 -> new LiveOutputImpl(inner1, this.manager()));
    }

    public PagedIterable<LiveOutput> list(
        String resourceGroupName, String accountName, String liveEventName, Context context) {
        PagedIterable<LiveOutputInner> inner =
            this.serviceClient().list(resourceGroupName, accountName, liveEventName, context);
        return inner.mapPage(inner1 -> new LiveOutputImpl(inner1, this.manager()));
    }

    public LiveOutput get(String resourceGroupName, String accountName, String liveEventName, String liveOutputName) {
        LiveOutputInner inner = this.serviceClient().get(resourceGroupName, accountName, liveEventName, liveOutputName);
        if (inner != null) {
            return new LiveOutputImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<LiveOutput> getWithResponse(
        String resourceGroupName, String accountName, String liveEventName, String liveOutputName, Context context) {
        Response<LiveOutputInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, accountName, liveEventName, liveOutputName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new LiveOutputImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String accountName, String liveEventName, String liveOutputName) {
        this.serviceClient().delete(resourceGroupName, accountName, liveEventName, liveOutputName);
    }

    public void delete(
        String resourceGroupName, String accountName, String liveEventName, String liveOutputName, Context context) {
        this.serviceClient().delete(resourceGroupName, accountName, liveEventName, liveOutputName, context);
    }

    private LiveOutputsClient serviceClient() {
        return this.innerClient;
    }

    private MediaservicesManager manager() {
        return this.serviceManager;
    }

    public LiveOutputImpl define(String name) {
        return new LiveOutputImpl(name, this.manager());
    }
}
