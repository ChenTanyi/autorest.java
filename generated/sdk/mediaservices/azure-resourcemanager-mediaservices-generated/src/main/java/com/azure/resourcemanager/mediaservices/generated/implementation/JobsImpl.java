// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.resourcemanager.mediaservices.generated.MediaservicesManager;
import com.azure.resourcemanager.mediaservices.generated.fluent.JobsClient;
import com.azure.resourcemanager.mediaservices.generated.fluent.models.JobInner;
import com.azure.resourcemanager.mediaservices.generated.models.Job;
import com.azure.resourcemanager.mediaservices.generated.models.Jobs;

public final class JobsImpl implements Jobs {
    private final JobsClient innerClient;

    private final MediaservicesManager serviceManager;

    public JobsImpl(JobsClient innerClient, MediaservicesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Job> list(String resourceGroupName, String accountName, String transformName) {
        PagedIterable<JobInner> inner = this.serviceClient().list(resourceGroupName, accountName, transformName);
        return inner.mapPage(inner1 -> new JobImpl(inner1, this.manager()));
    }

    public PagedIterable<Job> list(
        String resourceGroupName,
        String accountName,
        String transformName,
        String filter,
        String orderby,
        Context context) {
        PagedIterable<JobInner> inner =
            this.serviceClient().list(resourceGroupName, accountName, transformName, filter, orderby, context);
        return inner.mapPage(inner1 -> new JobImpl(inner1, this.manager()));
    }

    public Job get(String resourceGroupName, String accountName, String transformName, String jobName) {
        JobInner inner = this.serviceClient().get(resourceGroupName, accountName, transformName, jobName);
        if (inner != null) {
            return new JobImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Job> getWithResponse(
        String resourceGroupName, String accountName, String transformName, String jobName, Context context) {
        Response<JobInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, accountName, transformName, jobName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new JobImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String accountName, String transformName, String jobName) {
        this.serviceClient().delete(resourceGroupName, accountName, transformName, jobName);
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName, String accountName, String transformName, String jobName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, accountName, transformName, jobName, context);
    }

    public void cancelJob(String resourceGroupName, String accountName, String transformName, String jobName) {
        this.serviceClient().cancelJob(resourceGroupName, accountName, transformName, jobName);
    }

    public Response<Void> cancelJobWithResponse(
        String resourceGroupName, String accountName, String transformName, String jobName, Context context) {
        return this
            .serviceClient()
            .cancelJobWithResponse(resourceGroupName, accountName, transformName, jobName, context);
    }

    private JobsClient serviceClient() {
        return this.innerClient;
    }

    private MediaservicesManager manager() {
        return this.serviceManager;
    }

    public JobImpl define(String name) {
        return new JobImpl(name, this.manager());
    }
}
