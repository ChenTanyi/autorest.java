// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.databoxedge.generated.fluent.models.AddonInner;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/** Arc Addon. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "kind")
@JsonTypeName("ArcForKubernetes")
@JsonFlatten
@Fluent
public class ArcAddon extends AddonInner {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ArcAddon.class);

    /*
     * Arc resource subscription Id
     */
    @JsonProperty(value = "properties.subscriptionId", required = true)
    private String subscriptionId;

    /*
     * Arc resource group name
     */
    @JsonProperty(value = "properties.resourceGroupName", required = true)
    private String resourceGroupName;

    /*
     * Arc resource Name
     */
    @JsonProperty(value = "properties.resourceName", required = true)
    private String resourceName;

    /*
     * Arc resource location
     */
    @JsonProperty(value = "properties.resourceLocation", required = true)
    private String resourceLocation;

    /*
     * Arc resource version
     */
    @JsonProperty(value = "properties.version", access = JsonProperty.Access.WRITE_ONLY)
    private String version;

    /*
     * Host OS supported by the Arc addon.
     */
    @JsonProperty(value = "properties.hostPlatform", access = JsonProperty.Access.WRITE_ONLY)
    private PlatformType hostPlatform;

    /*
     * Platform where the runtime is hosted.
     */
    @JsonProperty(value = "properties.hostPlatformType", access = JsonProperty.Access.WRITE_ONLY)
    private HostPlatformType hostPlatformType;

    /*
     * Addon Provisioning State
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private AddonState provisioningState;

    /**
     * Get the subscriptionId property: Arc resource subscription Id.
     *
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Set the subscriptionId property: Arc resource subscription Id.
     *
     * @param subscriptionId the subscriptionId value to set.
     * @return the ArcAddon object itself.
     */
    public ArcAddon withSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }

    /**
     * Get the resourceGroupName property: Arc resource group name.
     *
     * @return the resourceGroupName value.
     */
    public String resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Set the resourceGroupName property: Arc resource group name.
     *
     * @param resourceGroupName the resourceGroupName value to set.
     * @return the ArcAddon object itself.
     */
    public ArcAddon withResourceGroupName(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    /**
     * Get the resourceName property: Arc resource Name.
     *
     * @return the resourceName value.
     */
    public String resourceName() {
        return this.resourceName;
    }

    /**
     * Set the resourceName property: Arc resource Name.
     *
     * @param resourceName the resourceName value to set.
     * @return the ArcAddon object itself.
     */
    public ArcAddon withResourceName(String resourceName) {
        this.resourceName = resourceName;
        return this;
    }

    /**
     * Get the resourceLocation property: Arc resource location.
     *
     * @return the resourceLocation value.
     */
    public String resourceLocation() {
        return this.resourceLocation;
    }

    /**
     * Set the resourceLocation property: Arc resource location.
     *
     * @param resourceLocation the resourceLocation value to set.
     * @return the ArcAddon object itself.
     */
    public ArcAddon withResourceLocation(String resourceLocation) {
        this.resourceLocation = resourceLocation;
        return this;
    }

    /**
     * Get the version property: Arc resource version.
     *
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Get the hostPlatform property: Host OS supported by the Arc addon.
     *
     * @return the hostPlatform value.
     */
    public PlatformType hostPlatform() {
        return this.hostPlatform;
    }

    /**
     * Get the hostPlatformType property: Platform where the runtime is hosted.
     *
     * @return the hostPlatformType value.
     */
    public HostPlatformType hostPlatformType() {
        return this.hostPlatformType;
    }

    /**
     * Get the provisioningState property: Addon Provisioning State.
     *
     * @return the provisioningState value.
     */
    public AddonState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (subscriptionId() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property subscriptionId in model ArcAddon"));
        }
        if (resourceGroupName() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property resourceGroupName in model ArcAddon"));
        }
        if (resourceName() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property resourceName in model ArcAddon"));
        }
        if (resourceLocation() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property resourceLocation in model ArcAddon"));
        }
    }
}
