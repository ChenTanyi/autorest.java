// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.databoxedge.generated.fluent.models.RoleInner;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/** Kubernetes role, Currently it's in Private Preview. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "kind")
@JsonTypeName("Kubernetes")
@JsonFlatten
@Fluent
public class KubernetesRole extends RoleInner {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(KubernetesRole.class);

    /*
     * Host OS supported by the Kubernetes role.
     */
    @JsonProperty(value = "properties.hostPlatform")
    private PlatformType hostPlatform;

    /*
     * State of Kubernetes deployment
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private KubernetesState provisioningState;

    /*
     * Platform where the runtime is hosted.
     */
    @JsonProperty(value = "properties.hostPlatformType", access = JsonProperty.Access.WRITE_ONLY)
    private HostPlatformType hostPlatformType;

    /*
     * Kubernetes cluster configuration
     */
    @JsonProperty(value = "properties.kubernetesClusterInfo")
    private KubernetesClusterInfo kubernetesClusterInfo;

    /*
     * Kubernetes role resources
     */
    @JsonProperty(value = "properties.kubernetesRoleResources")
    private KubernetesRoleResources kubernetesRoleResources;

    /*
     * Role status.
     */
    @JsonProperty(value = "properties.roleStatus")
    private RoleStatus roleStatus;

    /**
     * Get the hostPlatform property: Host OS supported by the Kubernetes role.
     *
     * @return the hostPlatform value.
     */
    public PlatformType hostPlatform() {
        return this.hostPlatform;
    }

    /**
     * Set the hostPlatform property: Host OS supported by the Kubernetes role.
     *
     * @param hostPlatform the hostPlatform value to set.
     * @return the KubernetesRole object itself.
     */
    public KubernetesRole withHostPlatform(PlatformType hostPlatform) {
        this.hostPlatform = hostPlatform;
        return this;
    }

    /**
     * Get the provisioningState property: State of Kubernetes deployment.
     *
     * @return the provisioningState value.
     */
    public KubernetesState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the hostPlatformType property: Platform where the runtime is hosted.
     *
     * @return the hostPlatformType value.
     */
    public HostPlatformType hostPlatformType() {
        return this.hostPlatformType;
    }

    /**
     * Get the kubernetesClusterInfo property: Kubernetes cluster configuration.
     *
     * @return the kubernetesClusterInfo value.
     */
    public KubernetesClusterInfo kubernetesClusterInfo() {
        return this.kubernetesClusterInfo;
    }

    /**
     * Set the kubernetesClusterInfo property: Kubernetes cluster configuration.
     *
     * @param kubernetesClusterInfo the kubernetesClusterInfo value to set.
     * @return the KubernetesRole object itself.
     */
    public KubernetesRole withKubernetesClusterInfo(KubernetesClusterInfo kubernetesClusterInfo) {
        this.kubernetesClusterInfo = kubernetesClusterInfo;
        return this;
    }

    /**
     * Get the kubernetesRoleResources property: Kubernetes role resources.
     *
     * @return the kubernetesRoleResources value.
     */
    public KubernetesRoleResources kubernetesRoleResources() {
        return this.kubernetesRoleResources;
    }

    /**
     * Set the kubernetesRoleResources property: Kubernetes role resources.
     *
     * @param kubernetesRoleResources the kubernetesRoleResources value to set.
     * @return the KubernetesRole object itself.
     */
    public KubernetesRole withKubernetesRoleResources(KubernetesRoleResources kubernetesRoleResources) {
        this.kubernetesRoleResources = kubernetesRoleResources;
        return this;
    }

    /**
     * Get the roleStatus property: Role status.
     *
     * @return the roleStatus value.
     */
    public RoleStatus roleStatus() {
        return this.roleStatus;
    }

    /**
     * Set the roleStatus property: Role status.
     *
     * @param roleStatus the roleStatus value to set.
     * @return the KubernetesRole object itself.
     */
    public KubernetesRole withRoleStatus(RoleStatus roleStatus) {
        this.roleStatus = roleStatus;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (kubernetesClusterInfo() != null) {
            kubernetesClusterInfo().validate();
        }
        if (kubernetesRoleResources() != null) {
            kubernetesRoleResources().validate();
        }
    }
}
