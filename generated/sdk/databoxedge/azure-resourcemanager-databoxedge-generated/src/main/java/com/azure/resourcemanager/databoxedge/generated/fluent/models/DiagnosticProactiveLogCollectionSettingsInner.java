// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.databoxedge.generated.models.ArmBaseModel;
import com.azure.resourcemanager.databoxedge.generated.models.ProactiveDiagnosticsConsent;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The diagnostic proactive log collection settings of a device. */
@JsonFlatten
@Fluent
public class DiagnosticProactiveLogCollectionSettingsInner extends ArmBaseModel {
    @JsonIgnore
    private final ClientLogger logger = new ClientLogger(DiagnosticProactiveLogCollectionSettingsInner.class);

    /*
     * DiagnosticProactiveLogCollectionSettings
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /*
     * Proactive diagnostic collection consent flag
     */
    @JsonProperty(value = "properties.userConsent", required = true)
    private ProactiveDiagnosticsConsent userConsent;

    /**
     * Get the systemData property: DiagnosticProactiveLogCollectionSettings.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the userConsent property: Proactive diagnostic collection consent flag.
     *
     * @return the userConsent value.
     */
    public ProactiveDiagnosticsConsent userConsent() {
        return this.userConsent;
    }

    /**
     * Set the userConsent property: Proactive diagnostic collection consent flag.
     *
     * @param userConsent the userConsent value to set.
     * @return the DiagnosticProactiveLogCollectionSettingsInner object itself.
     */
    public DiagnosticProactiveLogCollectionSettingsInner withUserConsent(ProactiveDiagnosticsConsent userConsent) {
        this.userConsent = userConsent;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (userConsent() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property userConsent in model"
                            + " DiagnosticProactiveLogCollectionSettingsInner"));
        }
    }
}
